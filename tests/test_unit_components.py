"""
    --- AUTO-GENERATED DOCSTRING ---
    Table of content is automatically generated by Agent Docstrings v1.3.5
    
    Classes/Functions:
        - TestMathematicalProcessor (line 59):
            - test_initialization() (line 63)
            - test_process_equation_basic(mathematical_processor, sample_equations) (line 70)
            - test_process_equation_empty(mathematical_processor) (line 96)
            - test_process_equation_invalid(mathematical_processor) (line 104)
            - test_create_mathematical_content(mathematical_processor) (line 115)
        - TestContentClassifier (line 128):
            - test_initialization() (line 132)
            - test_classify_prose(content_classifier) (line 141)
            - test_classify_equation(content_classifier) (line 149)
            - test_classify_figure(content_classifier) (line 158)
            - test_classify_table(content_classifier) (line 166)
        - TestEnhancedChunker (line 174):
            - test_initialization() (line 178)
            - test_chunk_text_basic(enhanced_chunker, sample_text) (line 186)
            - test_chunk_text_empty(enhanced_chunker) (line 202)
            - test_chunk_text_small(enhanced_chunker) (line 208)
        - TestAssetProcessor (line 218):
            - test_initialization() (line 222)
            - test_process_asset_figure(asset_processor) (line 228)
            - test_process_asset_table(asset_processor) (line 240)
            - test_process_asset_none(asset_processor) (line 251)
        - TestGlossaryExtractor (line 260):
            - test_initialization() (line 264)
            - test_extract_glossary_terms(glossary_extractor) (line 270)
            - test_extract_glossary_terms_empty(glossary_extractor) (line 280)
            - test_extract_glossary_terms_no_terms(glossary_extractor) (line 286)
        - TestEnhancedChunk (line 293):
            - test_chunk_creation() (line 297)
            - test_chunk_to_dict() (line 316)
            - test_chunk_get_summary() (line 334)
            - test_chunk_retrieval_text() (line 353)
        - TestContentType (line 369):
            - test_content_type_values() (line 373)
            - test_content_type_from_value() (line 382)
    --- END AUTO-GENERATED DOCSTRING ---

Unit Tests for Enhanced SciRAG Components

This module contains unit tests for individual components of the Enhanced SciRAG system.
Each test focuses on a single component in isolation.
"""
import pytest
import tempfile
from pathlib import Path
from typing import List, Dict, Any

from scirag.enhanced_processing import (
    MathematicalProcessor, ContentClassifier, EnhancedChunker,
    AssetProcessor, GlossaryExtractor, EnhancedChunk, ContentType
)


class TestMathematicalProcessor:
    """Test the MathematicalProcessor component."""

    @pytest.mark.unit
    def test_initialization(self):
        """Test MathematicalProcessor initialization."""
        processor = MathematicalProcessor(enable_sympy=True)
        assert processor.enable_sympy is True
        assert processor._sympy_available is not None

    @pytest.mark.unit
    def test_process_equation_basic(
            self,
            mathematical_processor,
            sample_equations):
        """Test basic equation processing."""
        for equation in sample_equations:
            result = mathematical_processor.process_equation(equation)

            assert isinstance(result, dict)
            assert 'equation_tex' in result
            assert 'math_norm' in result
            assert 'math_tokens' in result
            assert 'math_kgrams' in result
            assert 'complexity_score' in result
            assert 'equation_type' in result

            assert result['equation_tex'] == equation
            assert isinstance(result['math_tokens'], list)
            assert isinstance(result['math_kgrams'], list)
            assert 0 <= result['complexity_score'] <= 10
            assert result['equation_type'] in [
                'equation', 'fraction', 'integral', 'summation',
                'radical', 'expression', 'unknown'
            ]

    @pytest.mark.unit
    def test_process_equation_empty(self, mathematical_processor):
        """Test processing empty equation."""
        result = mathematical_processor.process_equation("")
        assert result['equation_tex'] == ""
        assert result['complexity_score'] == 0.0
        assert result['equation_type'] == 'unknown'

    @pytest.mark.unit
    def test_process_equation_invalid(self, mathematical_processor):
        """Test processing invalid equation."""
        result = mathematical_processor.process_equation(
            "invalid latex \\invalid{")
        assert result is not None
        # The processor classifies this as 'set_membership' due to \invalid{
        # pattern
        assert result['equation_type'] in [
            'set_membership', 'unknown', 'expression']

    @pytest.mark.unit
    def test_create_mathematical_content(self, mathematical_processor):
        """Test creating MathematicalContent object."""
        equation = "E = mc^2"
        content = mathematical_processor.create_mathematical_content(equation)

        assert content.equation_tex == equation
        assert content.math_norm is not None
        assert isinstance(content.math_tokens, list)
        assert isinstance(content.math_kgrams, list)
        assert content.complexity_score > 0
        assert content.equation_type == 'equation'


class TestContentClassifier:
    """Test the ContentClassifier component."""

    @pytest.mark.unit
    def test_initialization(self):
        """Test ContentClassifier initialization."""
        classifier = ContentClassifier()
        assert classifier is not None
        assert hasattr(classifier, 'equation_patterns')
        assert hasattr(classifier, 'figure_patterns')
        assert hasattr(classifier, 'table_patterns')

    @pytest.mark.unit
    def test_classify_prose(self, content_classifier):
        """Test classification of prose content."""
        content_type = content_classifier.classify_content(
            "This is regular prose text.", {}
        )
        assert content_type == ContentType.PROSE

    @pytest.mark.unit
    def test_classify_equation(self, content_classifier):
        """Test classification of equation content."""
        content_type = content_classifier.classify_content(
            "The equation E = mc^2 represents energy.", {}
        )
        # Should classify as prose since it's not pure equation
        assert content_type in [ContentType.PROSE, ContentType.EQUATION]

    @pytest.mark.unit
    def test_classify_figure(self, content_classifier):
        """Test classification of figure content."""
        content_type = content_classifier.classify_content(
            "Figure 1: A diagram showing the process.", {}
        )
        assert content_type == ContentType.FIGURE

    @pytest.mark.unit
    def test_classify_table(self, content_classifier):
        """Test classification of table content."""
        content_type = content_classifier.classify_content(
            "Table 2: Experimental results are shown below.", {}
        )
        assert content_type == ContentType.TABLE


class TestEnhancedChunker:
    """Test the EnhancedChunker component."""

    @pytest.mark.unit
    def test_initialization(self):
        """Test EnhancedChunker initialization."""
        chunker = EnhancedChunker(chunk_size=1000, overlap_ratio=0.2)
        assert chunker.chunk_size == 1000
        assert chunker.overlap_ratio == 0.2
        assert chunker.overlap_size == 200

    @pytest.mark.unit
    def test_chunk_text_basic(self, enhanced_chunker, sample_text):
        """Test basic text chunking."""
        chunks = enhanced_chunker.chunk_text(sample_text, "test_doc")

        assert isinstance(chunks, list)
        assert len(chunks) > 0

        for chunk in chunks:
            assert isinstance(chunk, EnhancedChunk)
            assert chunk.id is not None
            assert chunk.text is not None
            assert chunk.source_id == "test_doc"
            assert chunk.content_type is not None
            assert 0 <= chunk.confidence <= 1

    @pytest.mark.unit
    def test_chunk_text_empty(self, enhanced_chunker):
        """Test chunking empty text."""
        chunks = enhanced_chunker.chunk_text("", "test_doc")
        assert chunks == []

    @pytest.mark.unit
    def test_chunk_text_small(self, enhanced_chunker):
        """Test chunking small text."""
        text = "This is a short text."
        chunks = enhanced_chunker.chunk_text(text, "test_doc")

        assert len(chunks) == 1
        # The chunker normalizes text by removing trailing punctuation
        assert chunks[0].text == "This is a short text"


class TestAssetProcessor:
    """Test the AssetProcessor component."""

    @pytest.mark.unit
    def test_initialization(self):
        """Test AssetProcessor initialization."""
        processor = AssetProcessor()
        assert processor is not None

    @pytest.mark.unit
    def test_process_asset_figure(self, asset_processor):
        """Test processing figure assets."""
        result = asset_processor.process_asset(
            "Figure 1: A diagram showing the process", "test_doc"
        )

        if result:
            assert result.asset_type in ['figure', 'unknown']
            assert result.confidence >= 0
            assert result.source_id == "test_doc"

    @pytest.mark.unit
    def test_process_asset_table(self, asset_processor):
        """Test processing table assets."""
        result = asset_processor.process_asset(
            "Table 2: Experimental results", "test_doc"
        )

        if result:
            assert result.asset_type in ['table', 'unknown']
            assert result.confidence >= 0

    @pytest.mark.unit
    def test_process_asset_none(self, asset_processor):
        """Test processing non-asset content."""
        result = asset_processor.process_asset(
            "This is regular prose text", "test_doc"
        )
        # Should return None for non-asset content
        assert result is None


class TestGlossaryExtractor:
    """Test the GlossaryExtractor component."""

    @pytest.mark.unit
    def test_initialization(self):
        """Test GlossaryExtractor initialization."""
        extractor = GlossaryExtractor()
        assert extractor is not None

    @pytest.mark.unit
    def test_extract_glossary_terms(self, glossary_extractor):
        """Test glossary term extraction."""
        text = "The term 'energy equivalence' refers to the principle that E = mc^2."
        terms = glossary_extractor.extract_glossary_terms(text, "test_doc")

        assert isinstance(terms, list)
        # Should extract at least one term
        assert len(terms) >= 0

    @pytest.mark.unit
    def test_extract_glossary_terms_empty(self, glossary_extractor):
        """Test glossary extraction from empty text."""
        terms = glossary_extractor.extract_glossary_terms("", "test_doc")
        assert terms == []

    @pytest.mark.unit
    def test_extract_glossary_terms_no_terms(self, glossary_extractor):
        """Test glossary extraction from text without terms."""
        text = "This is regular prose without any special terms."
        terms = glossary_extractor.extract_glossary_terms(text, "test_doc")
        assert isinstance(terms, list)


class TestEnhancedChunk:
    """Test the EnhancedChunk data structure."""

    @pytest.mark.unit
    def test_chunk_creation(self):
        """Test creating an EnhancedChunk."""
        chunk = EnhancedChunk(
            id="test_1",
            text="Test content",
            source_id="test_doc",
            chunk_index=0,
            content_type=ContentType.PROSE,
            confidence=0.8
        )

        assert chunk.id == "test_1"
        assert chunk.text == "Test content"
        assert chunk.source_id == "test_doc"
        assert chunk.chunk_index == 0
        assert chunk.content_type == ContentType.PROSE
        assert chunk.confidence == 0.8

    @pytest.mark.unit
    def test_chunk_to_dict(self):
        """Test converting chunk to dictionary."""
        chunk = EnhancedChunk(
            id="test_1",
            text="Test content",
            source_id="test_doc",
            chunk_index=0,
            content_type=ContentType.PROSE,
            confidence=0.8
        )

        chunk_dict = chunk.to_dict()
        assert isinstance(chunk_dict, dict)
        assert chunk_dict['id'] == "test_1"
        assert chunk_dict['text'] == "Test content"
        assert chunk_dict['content_type'] == 'prose'

    @pytest.mark.unit
    def test_chunk_get_summary(self):
        """Test getting chunk summary."""
        chunk = EnhancedChunk(
            id="test_1",
            text="Test content for summary testing",
            source_id="test_doc",
            chunk_index=0,
            content_type=ContentType.PROSE,
            confidence=0.8
        )

        summary = chunk.get_summary()
        assert isinstance(summary, dict)
        assert 'id' in summary
        assert 'content_type' in summary
        assert 'text_preview' in summary
        assert 'confidence' in summary

    @pytest.mark.unit
    def test_chunk_retrieval_text(self):
        """Test getting retrieval text."""
        chunk = EnhancedChunk(
            id="test_1",
            text="Test content",
            source_id="test_doc",
            chunk_index=0,
            content_type=ContentType.PROSE,
            confidence=0.8
        )

        retrieval_text = chunk.get_retrieval_text()
        assert isinstance(retrieval_text, str)
        assert "Test content" in retrieval_text


class TestContentType:
    """Test the ContentType enum."""

    @pytest.mark.unit
    def test_content_type_values(self):
        """Test ContentType enum values."""
        assert ContentType.PROSE.value == "prose"
        assert ContentType.EQUATION.value == "equation"
        assert ContentType.FIGURE.value == "figure"
        assert ContentType.TABLE.value == "table"
        assert ContentType.DEFINITION.value == "definition"

    @pytest.mark.unit
    def test_content_type_from_value(self):
        """Test creating ContentType from value."""
        prose_type = ContentType("prose")
        assert prose_type == ContentType.PROSE

        equation_type = ContentType("equation")
        assert equation_type == ContentType.EQUATION