"""
    --- AUTO-GENERATED DOCSTRING ---
    Table of content is automatically generated by Agent Docstrings v1.3.5
    
    Classes/Functions:
        - TestEnhancedSciRAGIntegration (line 47):
            - test_enhanced_scirag_initialization() (line 51)
            - test_enhanced_scirag_initialization_minimal() (line 74)
            - test_processing_stats(enhanced_scirag) (line 91)
            - test_chunk_validation(enhanced_scirag) (line 107)
        - TestComponentIntegration (line 122):
            - test_mathematical_processor_with_classifier(mathematical_processor, content_classifier) (line 126)
            - test_enhanced_chunker_with_all_processors(enhanced_chunker, sample_text) (line 142)
            - test_document_processor_integration() (line 158)
        - TestErrorHandlingIntegration (line 174):
            - test_graceful_degradation() (line 179)
            - test_error_propagation(enhanced_scirag) (line 196)
        - TestConfigurationIntegration (line 210):
            - test_configuration_consistency() (line 215)
            - test_environment_variable_override() (line 231)
        - TestDataFlowIntegration (line 252):
            - test_text_to_chunks_flow(enhanced_chunker, sample_text) (line 256)
            - test_chunk_filtering_flow(enhanced_scirag) (line 280)
        - TestExportIntegration (line 297):
            - test_json_export(enhanced_scirag) (line 301)
            - test_csv_export(enhanced_scirag) (line 314)
            - test_export_invalid_format(enhanced_scirag) (line 326)
    --- END AUTO-GENERATED DOCSTRING ---

Integration Tests for Enhanced SciRAG System

This module contains integration tests that test how different components
work together in the Enhanced SciRAG system.
"""
import pytest
import tempfile
from pathlib import Path
from typing import List, Dict, Any

from scirag import SciRagEnhanced
from scirag.enhanced_processing import (
    MathematicalProcessor, ContentClassifier, EnhancedChunker,
    AssetProcessor, GlossaryExtractor, EnhancedDocumentProcessor
)


class TestEnhancedSciRAGIntegration:
    """Test Enhanced SciRAG system integration."""

    @pytest.mark.integration
    def test_enhanced_scirag_initialization(self):
        """Test Enhanced SciRAG initialization with all features."""
        enhanced_scirag = SciRagEnhanced(
            enable_enhanced_processing=True,
            enable_mathematical_processing=True,
            enable_asset_processing=True,
            enable_glossary_extraction=True,
            enable_enhanced_chunking=True,
            chunk_size=1000,
            chunk_overlap=200,
            fallback_on_error=True
        )

        assert enhanced_scirag.enable_enhanced_processing is True
        assert enhanced_scirag.enable_mathematical_processing is True
        assert enhanced_scirag.enable_asset_processing is True
        assert enhanced_scirag.enable_glossary_extraction is True
        assert enhanced_scirag.enable_enhanced_chunking is True
        assert enhanced_scirag.chunk_size == 1000
        assert enhanced_scirag.chunk_overlap == 200
        assert enhanced_scirag.fallback_on_error is True

    @pytest.mark.integration
    def test_enhanced_scirag_initialization_minimal(self):
        """Test Enhanced SciRAG initialization with minimal features."""
        enhanced_scirag = SciRagEnhanced(
            enable_enhanced_processing=False,
            enable_mathematical_processing=False,
            enable_asset_processing=False,
            enable_glossary_extraction=False,
            enable_enhanced_chunking=False
        )

        assert enhanced_scirag.enable_enhanced_processing is False
        assert enhanced_scirag.enable_mathematical_processing is False
        assert enhanced_scirag.enable_asset_processing is False
        assert enhanced_scirag.enable_glossary_extraction is False
        assert enhanced_scirag.enable_enhanced_chunking is False

    @pytest.mark.integration
    def test_processing_stats(self, enhanced_scirag):
        """Test processing statistics tracking."""
        stats = enhanced_scirag.get_processing_stats()

        assert isinstance(stats, dict)
        assert 'enhanced_processing_enabled' in stats
        assert 'mathematical_processing_enabled' in stats
        assert 'asset_processing_enabled' in stats
        assert 'glossary_extraction_enabled' in stats
        assert 'enhanced_chunking_enabled' in stats
        assert 'documents_processed' in stats
        assert 'chunks_created' in stats
        assert 'processing_time' in stats
        assert 'errors' in stats

    @pytest.mark.integration
    def test_chunk_validation(self, enhanced_scirag):
        """Test chunk validation functionality."""
        validation = enhanced_scirag.validate_enhanced_chunks()

        assert isinstance(validation, dict)
        assert 'total_chunks' in validation
        assert 'valid_chunks' in validation
        assert 'invalid_chunks' in validation
        assert 'content_type_distribution' in validation

        assert validation['total_chunks'] == 0  # No chunks loaded yet
        assert validation['valid_chunks'] == 0
        assert validation['invalid_chunks'] == 0


class TestComponentIntegration:
    """Test integration between different components."""

    @pytest.mark.integration
    def test_mathematical_processor_with_classifier(
            self, mathematical_processor, content_classifier):
        """Test mathematical processor with content classifier."""
        equation = "E = mc^2"

        # Process equation
        math_result = mathematical_processor.process_equation(equation)

        # Classify content
        content_type = content_classifier.classify_content(equation, {})

        assert math_result is not None
        assert content_type is not None
        assert math_result['equation_type'] == 'equation'

    @pytest.mark.integration
    def test_enhanced_chunker_with_all_processors(
            self, enhanced_chunker, sample_text):
        """Test enhanced chunker with all processing components."""
        chunks = enhanced_chunker.chunk_text(sample_text, "test_doc")

        assert len(chunks) > 0

        # Check that chunks have been processed by all components
        for chunk in chunks:
            assert chunk.id is not None
            assert chunk.text is not None
            assert chunk.source_id == "test_doc"
            assert chunk.content_type is not None
            assert 0 <= chunk.confidence <= 1

    @pytest.mark.integration
    def test_document_processor_integration(self):
        """Test EnhancedDocumentProcessor integration."""
        processor = EnhancedDocumentProcessor(
            enable_mathematical_processing=True,
            enable_asset_processing=True,
            enable_glossary_extraction=True,
            chunk_size=1000,
            overlap_ratio=0.2
        )

        assert processor is not None
        assert processor.enable_mathematical_processing is True
        assert processor.enable_asset_processing is True
        assert processor.enable_glossary_extraction is True


class TestErrorHandlingIntegration:
    """Test error handling across integrated components."""

    @pytest.mark.integration
    @pytest.mark.error_handling
    def test_graceful_degradation(self):
        """Test graceful degradation when components fail."""
        # Test with invalid configuration
        enhanced_scirag = SciRagEnhanced(
            enable_enhanced_processing=True,
            fallback_on_error=True
        )

        # Should not raise exception even with invalid inputs
        try:
            chunks = enhanced_scirag.load_documents_enhanced([], [])
            assert chunks == []
        except Exception as e:
            pytest.fail(f"Should handle invalid inputs gracefully: {e}")

    @pytest.mark.integration
    @pytest.mark.error_handling
    def test_error_propagation(self, enhanced_scirag):
        """Test that errors are properly tracked."""
        # Process with invalid input
        try:
            chunks = enhanced_scirag.load_documents_enhanced(
                ["nonexistent.txt"], ["test"])
            # Should either succeed with empty chunks or track errors
            stats = enhanced_scirag.get_processing_stats()
            assert 'errors' in stats
        except Exception:
            # Expected for nonexistent file
            pass


class TestConfigurationIntegration:
    """Test configuration integration across components."""

    @pytest.mark.integration
    @pytest.mark.configuration
    def test_configuration_consistency(self):
        """Test that configuration is consistent across components."""
        from scirag.config import enhanced_config

        # Test configuration access
        assert hasattr(enhanced_config, 'ENABLE_ENHANCED_PROCESSING')
        assert hasattr(enhanced_config, 'ENABLE_MATHEMATICAL_PROCESSING')
        assert hasattr(enhanced_config, 'ENABLE_ASSET_PROCESSING')
        assert hasattr(enhanced_config, 'ENABLE_GLOSSARY_EXTRACTION')

        # Test configuration validation
        errors = enhanced_config.validate_config()
        assert isinstance(errors, list)

    @pytest.mark.integration
    @pytest.mark.configuration
    def test_environment_variable_override(self):
        """Test environment variable configuration override."""
        import os
        import importlib

        # Set environment variable
        os.environ['SCIRAG_MATH_PROCESSING'] = 'false'

        try:
            # Reload the config module to pick up the environment variable
            import scirag.config
            importlib.reload(scirag.config)
            enhanced_config = scirag.config.enhanced_config

            # Configuration should reflect environment variable
            assert enhanced_config.ENABLE_MATHEMATICAL_PROCESSING is False
        finally:
            # Clean up
            os.environ.pop('SCIRAG_MATH_PROCESSING', None)


class TestDataFlowIntegration:
    """Test data flow through the integrated system."""

    @pytest.mark.integration
    def test_text_to_chunks_flow(self, enhanced_chunker, sample_text):
        """Test complete text to chunks data flow."""
        chunks = enhanced_chunker.chunk_text(sample_text, "test_doc")

        # Verify data flow
        assert len(chunks) > 0

        for chunk in chunks:
            # Each chunk should have all required fields
            assert chunk.id is not None
            assert chunk.text is not None
            assert chunk.source_id == "test_doc"
            assert chunk.content_type is not None
            assert 0 <= chunk.confidence <= 1

            # Chunk should be processable
            if chunk.is_mathematical():
                assert chunk.mathematical_content is not None
            if chunk.is_asset():
                assert chunk.asset_content is not None
            if chunk.is_glossary():
                assert chunk.glossary_content is not None

    @pytest.mark.integration
    def test_chunk_filtering_flow(self, enhanced_scirag):
        """Test chunk filtering data flow."""
        # Test filtering methods
        math_chunks = enhanced_scirag.get_mathematical_chunks()
        asset_chunks = enhanced_scirag.get_asset_chunks()
        glossary_chunks = enhanced_scirag.get_glossary_chunks()

        assert isinstance(math_chunks, list)
        assert isinstance(asset_chunks, list)
        assert isinstance(glossary_chunks, list)

        # All should be empty initially
        assert len(math_chunks) == 0
        assert len(asset_chunks) == 0
        assert len(glossary_chunks) == 0


class TestExportIntegration:
    """Test export functionality integration."""

    @pytest.mark.integration
    def test_json_export(self, enhanced_scirag):
        """Test JSON export functionality."""
        json_export = enhanced_scirag.export_enhanced_chunks('json')

        assert isinstance(json_export, str)
        # Should be valid JSON
        import json
        try:
            json.loads(json_export)
        except json.JSONDecodeError:
            pytest.fail("JSON export should be valid JSON")

    @pytest.mark.integration
    def test_csv_export(self, enhanced_scirag):
        """Test CSV export functionality."""
        csv_export = enhanced_scirag.export_enhanced_chunks('csv')

        assert isinstance(csv_export, str)
        # Should contain CSV headers
        assert 'id,text,content_type,confidence,source_id' in csv_export
        assert 'content_type' in csv_export
        assert 'confidence' in csv_export
        assert 'source_id' in csv_export

    @pytest.mark.integration
    def test_export_invalid_format(self, enhanced_scirag):
        """Test export with invalid format."""
        result = enhanced_scirag.export_enhanced_chunks('invalid_format')
        assert result == "No enhanced chunks available"