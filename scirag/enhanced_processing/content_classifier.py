"""
    --- AUTO-GENERATED DOCSTRING ---
    Table of content is automatically generated by Agent Docstrings v1.3.5
    
    Classes/Functions:
        - ContentClassifier (line 29):
            - classify_content(text: str, metadata: Dict[str, Any]) -> ContentType (line 88)
            - _is_equation(text: str) -> bool (line 136)
            - _is_figure(text: str) -> bool (line 143)
            - _is_table(text: str) -> bool (line 150)
            - _is_definition(text: str) -> bool (line 157)
            - _is_algorithm(text: str) -> bool (line 164)
            - _is_code(text: str) -> bool (line 171)
            - _is_example(text: str) -> bool (line 178)
            - get_confidence_score(text: str, content_type: ContentType) -> float (line 194)
            - classify_with_confidence(text: str, metadata: Dict[str, Any]) -> tuple[ContentType, float] (line 248)
    --- END AUTO-GENERATED DOCSTRING ---

Content classification module for Enhanced SciRAG.

This module provides content type classification capabilities for different
types of scientific content including equations, figures, tables, and definitions.
"""
import re
from typing import Dict, Any, Optional
from .enhanced_chunk import ContentType


class ContentClassifier:
    """Content type classifier for scientific documents."""

    def __init__(self):
        """Initialize content classifier."""
        self.equation_patterns = [
            r'\\begin\{equation\}',
            r'\\begin\{align\}',
            r'\\begin\{eqnarray\}',
            r'\\begin\{math\}',
            r'\$[^$]+\$',
            r'\\\[[^\]]+\\\]',
            r'\\\([^)]+\\\)'
        ]

        self.figure_patterns = [
            r'\\begin\{figure\}',
            r'\\includegraphics',
            r'\\begin\{picture\}',
            r'\\begin\{tikzpicture\}',
            r'^Figure\s+\d+:',  # Plain text figure patterns
            r'^Fig\.\s+\d+:',
            r'^Figure\s+\d+\.',
            r'^Fig\.\s+\d+\.'
        ]

        self.table_patterns = [
            r'\\begin\{table\}',
            r'\\begin\{tabular\}',
            r'\\begin\{array\}',
            r'\\begin\{longtable\}',
            r'^Table\s+\d+:',  # Plain text table patterns
            r'^Tab\.\s+\d+:',
            r'^Table\s+\d+\.',
            r'^Tab\.\s+\d+\.'
        ]

        self.definition_patterns = [
            r'\\textbf\{[^}]*definition[^}]*\}',
            r'\\textit\{[^}]*definition[^}]*\}',
            r'definition:',
            r'def\.',
            r'\\def\s+'
        ]

        self.algorithm_patterns = [
            r'\\begin\{algorithm\}',
            r'\\begin\{algorithmic\}',
            r'algorithm:',
            r'\\alg\s+'
        ]

        self.code_patterns = [
            r'\\begin\{verbatim\}',
            r'\\begin\{lstlisting\}',
            r'```',
            r'\\texttt\{[^}]+\}'
        ]

    def classify_content(
            self, text: str, metadata: Dict[str, Any]) -> ContentType:
        """
        Classify content type based on text and metadata.

        Args:
            text: Content text to classify
            metadata: Additional metadata

        Returns:
            ContentType enum value
        """
        if not text:
            return ContentType.OTHER

        text_lower = text.lower().strip()

        # Check for equations
        if self._is_equation(text):
            return ContentType.EQUATION

        # Check for figures
        if self._is_figure(text):
            return ContentType.FIGURE

        # Check for tables
        if self._is_table(text):
            return ContentType.TABLE

        # Check for definitions
        if self._is_definition(text):
            return ContentType.DEFINITION

        # Check for algorithms
        if self._is_algorithm(text):
            return ContentType.ALGORITHM

        # Check for code
        if self._is_code(text):
            return ContentType.CODE

        # Check for examples
        if self._is_example(text):
            return ContentType.EXAMPLE

        # Default to prose
        return ContentType.PROSE

    def _is_equation(self, text: str) -> bool:
        """Check if text contains mathematical equations."""
        for pattern in self.equation_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        return False

    def _is_figure(self, text: str) -> bool:
        """Check if text contains figures or images."""
        for pattern in self.figure_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        return False

    def _is_table(self, text: str) -> bool:
        """Check if text contains tables."""
        for pattern in self.table_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        return False

    def _is_definition(self, text: str) -> bool:
        """Check if text contains definitions."""
        for pattern in self.definition_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        return False

    def _is_algorithm(self, text: str) -> bool:
        """Check if text contains algorithms."""
        for pattern in self.algorithm_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        return False

    def _is_code(self, text: str) -> bool:
        """Check if text contains code."""
        for pattern in self.code_patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        return False

    def _is_example(self, text: str) -> bool:
        """Check if text contains examples."""
        example_indicators = [
            r'example:',
            r'for example',
            r'e\.g\.',
            r'such as',
            r'\\begin\{example\}',
            r'\\ex\s+'
        ]

        for pattern in example_indicators:
            if re.search(pattern, text, re.IGNORECASE):
                return True
        return False

    def get_confidence_score(
            self,
            text: str,
            content_type: ContentType) -> float:
        """
        Get confidence score for content type classification.

        Args:
            text: Content text
            content_type: Classified content type

        Returns:
            Confidence score between 0.0 and 1.0
        """
        if not text:
            return 0.0

        # Count pattern matches
        pattern_count = 0
        total_patterns = 0

        if content_type == ContentType.EQUATION:
            patterns = self.equation_patterns
        elif content_type == ContentType.FIGURE:
            patterns = self.figure_patterns
        elif content_type == ContentType.TABLE:
            patterns = self.table_patterns
        elif content_type == ContentType.DEFINITION:
            patterns = self.definition_patterns
        elif content_type == ContentType.ALGORITHM:
            patterns = self.algorithm_patterns
        elif content_type == ContentType.CODE:
            patterns = self.code_patterns
        else:
            return 0.5  # Default confidence for prose and other

        total_patterns = len(patterns)

        for pattern in patterns:
            if re.search(pattern, text, re.IGNORECASE):
                pattern_count += 1

        if total_patterns == 0:
            return 0.5

        # Calculate confidence based on pattern matches
        confidence = pattern_count / total_patterns

        # Boost confidence for longer matches
        if len(text) > 100:
            confidence = min(confidence * 1.2, 1.0)

        return confidence

    def classify_with_confidence(
            self, text: str, metadata: Dict[str, Any]) -> tuple[ContentType, float]:
        """
        Classify content type with confidence score.

        Args:
            text: Content text to classify
            metadata: Additional metadata

        Returns:
            Tuple of (ContentType, confidence_score)
        """
        content_type = self.classify_content(text, metadata)
        confidence = self.get_confidence_score(text, content_type)

        return content_type, confidence